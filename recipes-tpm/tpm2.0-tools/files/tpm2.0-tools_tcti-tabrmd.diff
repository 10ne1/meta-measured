commit 2188155d9319906b82fec58477107fe1b139af8f
Author: Philip Tricca <flihp@twobit.us>
Date:   Sun Dec 11 15:48:58 2016 -0800

    Add support for the tabrmd TCTI module.

Index: tpm2.0-tools/Makefile.am
===================================================================
--- tpm2.0-tools.orig/Makefile.am
+++ tpm2.0-tools/Makefile.am
@@ -35,10 +35,10 @@ ACLOCAL_AMFLAGS = -I m4
 INCLUDE_DIRS = -I$(srcdir)/src -I$(srcdir)/lib
 LIB_COMMON := lib/libcommon.a
 
-AM_CFLAGS    := $(INCLUDE_DIRS) $(TPM20_TSS_CFLAGS) $(EXTRA_CFLAGS)
+AM_CFLAGS    := $(INCLUDE_DIRS) $(TPM20_TSS_CFLAGS) $(EXTRA_CFLAGS) $(TCTI_TABRMD_CFLAGS)
 AM_LDFLAGS   := $(EXTRA_LDFLAGS)
 
-LDADD = $(LIB_COMMON) $(TPM20_TSS_LIBS) $(TCTI_SOCK_LIBS) $(TCTI_DEV_LIBS)
+LDADD = $(LIB_COMMON) $(TPM20_TSS_LIBS) $(TCTI_SOCK_LIBS) $(TCTI_DEV_LIBS) $(TCTI_TABRMD_LIBS)
 
 sbin_PROGRAMS = \
     tools/tpm2_create \
Index: tpm2.0-tools/configure.ac
===================================================================
--- tpm2.0-tools.orig/configure.ac
+++ tpm2.0-tools/configure.ac
@@ -43,9 +43,29 @@ AS_IF(
              AC_MSG_FAILURE([--with-tcti-socket option provided but libtcti-socket not detected.])
          fi])])
 AM_CONDITIONAL([HAVE_TCTI_SOCK],[test "x$with_tcti_socket" = "xyes"])
+# disable libtcti-tabrmd selectively (enabled by default)
+AC_ARG_WITH(
+    [tcti-tabrmd],
+    [AS_HELP_STRING([--with-tcti-tabrmd],
+        [Build tools with support for the tabrmd TCTI.])],
+    [],
+    [with_tcti_tabrmd=check])
+AS_IF(
+    [test "x$with_tcti_tabrmd" != "xno"],
+    [PKG_CHECK_MODULES(
+        [TCTI_TABRMD],
+        [tcti-tabrmd],
+        [AC_DEFINE([HAVE_TCTI_TABRMD], [1])
+         with_tcti_tabrmd=yes],
+        [if test "x$with_tcti_tabrmd" = "xyes"; then
+             AC_MSG_FAILURE([--with-tcti-tabrmd option provided but libtcti-tabrmd not detected.])
+         fi])])
+AM_CONDITIONAL([HAVE_TCTI_TABRMD],[test "x$with_tcti_tabrmd" = "xyes"])
 # ensure we have at least one TCTI enabled, can't do much without one
 AS_IF(
-    [test "x$with_tcti_device" != "xyes" -a "x$with_tcti_socket" != "xyes"],
+    [test "x$with_tcti_device" != "xyes" -a \
+          "x$with_tcti_socket" != "xyes" -a \
+          "x$with_tcti_tabrmd" != "xyes"],
     [AC_MSG_ERROR(
         [no TCTIs: at least one TCTI library must be enabled],
         [1])])
Index: tpm2.0-tools/lib/context-util.c
===================================================================
--- tpm2.0-tools.orig/lib/context-util.c
+++ tpm2.0-tools/lib/context-util.c
@@ -36,6 +36,9 @@
 #ifdef HAVE_TCTI_SOCK
 #include <tcti/tcti_socket.h>
 #endif
+#ifdef HAVE_TCTI_TABRMD
+#include <tcti/tcti-tabrmd.h>
+#endif
 
 #include "context-util.h"
 
@@ -124,6 +127,37 @@ tcti_socket_init (char const *address,
     return tcti_ctx;
 }
 #endif
+#ifdef HAVE_TCTI_TABRMD
+TSS2_TCTI_CONTEXT*
+tcti_tabrmd_init (void)
+{
+    TSS2_TCTI_CONTEXT *tcti_ctx;
+    TSS2_RC rc;
+    size_t size;
+
+    rc = tss2_tcti_tabrmd_init(NULL, &size);
+    if (rc != TSS2_RC_SUCCESS) {
+        fprintf (stderr,
+                 "Failed to get size for TABRMD TCTI context: 0x%x\n",
+                 rc);
+        return NULL;
+    }
+    tcti_ctx = (TSS2_TCTI_CONTEXT*)calloc (1, size);
+    if (tcti_ctx == NULL) {
+        fprintf (stderr, "Allocation for TABRMD TCTI context failed: %s\n",
+                 strerror (errno));
+        return NULL;
+    }
+    rc = tss2_tcti_tabrmd_init (tcti_ctx, &size);
+    if (rc != TSS2_RC_SUCCESS) {
+        fprintf (stderr, "Failed to initialize TABRMD TCTI context: 0x%x\n",
+                 rc);
+        free (tcti_ctx);
+        return NULL;
+    }
+    return tcti_ctx;
+}
+#endif
 /*
  * Initialize a SAPI context using the TCTI context provided by the caller.
  * This function allocates memory for the SAPI context and returns it to the
@@ -194,6 +228,10 @@ tcti_init_from_options (common_opts_t *o
         return tcti_socket_init (options->socket_address,
                                  options->socket_port);
 #endif
+#ifdef HAVE_TCTI_TABRMD
+    case TABRMD_TCTI:
+        return tcti_tabrmd_init ();
+#endif
     default:
         return NULL;
     }
Index: tpm2.0-tools/lib/options.c
===================================================================
--- tpm2.0-tools.orig/lib/options.c
+++ tpm2.0-tools/lib/options.c
@@ -67,6 +67,12 @@ tcti_map_entry_t tcti_map_table[] = {
         .type = SOCKET_TCTI,
     },
 #endif
+#ifdef HAVE_TCTI_TABRMD
+    {
+        .name = "tabrmd",
+        .type = TABRMD_TCTI,
+    },
+#endif
     {
         .name = "unknown",
         .type = UNKNOWN_TCTI,
@@ -136,6 +142,11 @@ sanity_check_common (common_opts_t  *opt
         }
         break;
 #endif
+#ifdef HAVE_TCTI_TABRMD
+    case TABRMD_TCTI:
+        /* no options for this one yet */
+        break;
+#endif
     default:
         fprintf (stderr, "invalid TCTI, see --help\n");
         return 2;
@@ -244,6 +255,9 @@ get_common_opts (int
             .val     = 'p',
         },
 #endif
+#ifdef HAVE_TCTI_TABRMD
+        /* no options for this TCTI yet */
+#endif
         {
             .name    = "help",
             .has_arg = no_argument,
@@ -322,6 +336,9 @@ get_common_opts (int
             }
         }   break;
 #endif
+#ifdef HAVE_TCTI_TABRMD
+        /* No options for this TCTI yet. */
+#endif
         case 'h':
             common_opts->help = true;
             break;
@@ -363,6 +380,9 @@ dump_common_opts (common_opts_t *opts)
     printf ("  address:          %s\n", opts->socket_address);
     printf ("  port:             %d\n", opts->socket_port);
 #endif
+#ifdef HAVE_TCTI_TABRMD
+    /* No options for this TCTI yet. */
+#endif
     printf ("  help:             %s\n", opts->help    ? "true" : "false");
     printf ("  verbose:          %s\n", opts->verbose ? "true" : "false");
     printf ("  version:          %s\n", opts->version ? "true" : "false");
Index: tpm2.0-tools/lib/options.h
===================================================================
--- tpm2.0-tools.orig/lib/options.h
+++ tpm2.0-tools/lib/options.h
@@ -44,7 +44,10 @@
  * We do this to preserve the current default / expected behavior (use of
  * the socket TCTI).
  */
-#ifdef HAVE_TCTI_SOCK
+#ifdef HAVE_TCTI_TABRMD
+  #define TCTI_DEFAULT      TABRMD_TCTI
+  #define TCTI_DEFAULT_STR  "tabrmd"
+#elif HAVE_TCTI_SOCK
   #define TCTI_DEFAULT      SOCKET_TCTI
   #define TCTI_DEFAULT_STR  "socket"
 #elif  HAVE_TCTI_DEV
@@ -82,6 +85,9 @@ typedef enum {
 #ifdef HAVE_TCTI_SOCK
     SOCKET_TCTI,
 #endif
+#ifdef HAVE_TCTI_TABRMD
+    TABRMD_TCTI,
+#endif
     UNKNOWN_TCTI,
     N_TCTI,
 } TCTI_TYPE;
